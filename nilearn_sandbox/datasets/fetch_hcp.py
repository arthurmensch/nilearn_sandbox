from nilearn.datasets.utils import _get_dataset_dir, _get_dataset_descr
import numpy as np
import os
from sklearn.datasets.base import Bunch


def fetch_hcp_rest(data_dir, n_subjects=10):
    dataset_name = 'HCP'
    source_dir = _get_dataset_dir(dataset_name, data_dir=data_dir,
                                verbose=0)
    filenames = []
    ids = [[100307, 100408, 101006, 101107, 101309, 101410, 101915, 102008, 102311, 102816, 103111, 103414, 103515,
           103818, 104820, 105014, 105115, 105216, 106016, 106319, 106521, 107321, 107422, 108121, 108323, 108525,
           108828, 109123, 109325, 110411, 111312, 111413, 111716, 112819, 113215, 113619, 113821, 113922, 114419,
           114924, 115320, 116120, 116524, 117122, 117324, 118528, 118730, 118932, 119833, 120111, 120212, 120515,
           121315, 121618, 122317, 122620, 123117, 123420, 123925, 124220, 124422, 124826, 125525, 126325, 126628,
           126931, 127630, 127933, 128127, 128329, 128632, 129028, 129432, 129533, 130013, 130316, 130922, 131217,
           131621, 131722, 131924, 132118, 133019, 133625, 133827, 133928, 134324, 135225, 135528, 135932, 136227,
           136833, 137027, 137128, 137633, 137936, 138231, 138534, 139233, 139637, 140117, 140420, 994273],
           [140824, 140925, 141422, 141826, 142424, 142626, 142828, 143325, 143527, 144226, 144832, 145531, 145834,
            146331, 146432, 147030, 147737, 148032, 148335, 148840, 148941, 149337, 149539, 149741, 150423, 150524,
            150625, 150726, 151223, 151526, 151627, 151728, 152831, 153025, 153429, 153833, 154431, 154734, 154835,
            154936, 155231, 155635, 156233, 156637, 157336, 157437, 158035, 158136, 158540, 159138, 159239, 159340,
            159441, 160123, 160830, 161327, 161630, 161731, 162026, 162228, 162329, 162733, 163129, 163331, 163432,
            163836, 164030, 164131, 164939, 165032, 165234, 165840, 166438, 167036, 167743, 168139, 168341, 169141,
            169343, 169444, 170934, 171431, 171633, 172029, 172130, 172332, 172534, 172938, 173132, 173334, 173435,
            173536, 173940, 175035, 175439, 176542, 177645, 177746, 178142, 178748, 178849, 178950, 992774],
           [179346, 179548, 180129, 180432, 180836, 180937, 181131, 181232, 182739, 182840, 183034, 185139, 185442,
            186141, 187143, 187547, 187850, 188347, 189349, 189450, 190031, 191033, 191336, 191437, 191841, 192439,
            192540, 192843, 193239, 194140, 194645, 194847, 195041, 195647, 195849, 196144, 196750, 197348, 197449,
            197550, 197651, 198350, 198451, 198855, 199150, 199251, 199453, 199655, 199958, 200109, 200614, 201111,
            201414, 201818, 203418, 204016, 204521, 205119, 205220, 205725, 205826, 207628, 208024, 208226, 208327,
            208428, 209834, 209935, 210011, 210415, 210617, 211215, 211316, 211417, 211720, 211922, 212116, 212217,
            212318, 212419, 214019, 214221, 214423, 214726, 217126, 217429, 221319, 224022, 231928, 233326, 239944,
            245333, 246133, 249947, 250427, 250932, 251833, 255639, 256540, 268850, 280739, 284646],
           [285345, 285446, 289555, 290136, 293748, 298051, 298455, 303119, 303624, 304020, 307127, 308331, 310621,
            316633, 329440, 334635, 339847, 351938, 352132, 352738, 355239, 355542, 356948, 361941, 365343, 366042,
            366446, 371843, 377451, 380036, 382242, 385450, 386250, 390645, 395958, 397154, 397760, 397861, 412528,
            414229, 415837, 422632, 433839, 436239, 436845, 441939, 445543, 448347, 465852, 473952, 475855, 479762,
            480141, 485757, 486759, 497865, 499566, 500222, 510326, 519950, 521331, 522434, 530635, 531536, 540436,
            541943, 545345, 547046, 552544, 559053, 561242, 562446, 565452, 566454, 567052, 567961, 568963, 570243,
            571548, 573249, 573451, 579665, 580044, 580347, 581349, 583858, 585862, 586460, 592455, 594156, 598568,
            599469, 599671, 601127, 611231, 613538, 620434, 622236, 623844, 627549, 638049, 644044],
           [645551, 672756, 680957, 690152, 705341, 715647, 734045, 748662, 756055, 770352, 782561, 789373, 814649,
            833148, 845458, 859671, 871964, 877269, 894673, 899885, 904044, 917255, 937160, 959574, 979984, 991267,
            650746, 673455, 683256, 695768, 709551, 729254, 742549, 749361, 759869, 771354, 784565, 792564, 816653,
            833249, 849971, 861456, 872158, 885975, 896778, 901038, 907656, 922854, 951457, 965367, 983773,
            654754, 677968, 685058, 702133, 713239, 729557, 745555, 751348, 761957, 779370, 786569, 792766, 826353,
            837560, 856766, 865363, 872764, 887373, 896879, 901139, 910241, 930449, 957974, 965771, 984472,
            665254, 679568, 687163, 704238, 715041, 732243, 748258, 753251, 765056, 782157, 788876, 802844, 826454,
            837964, 857263, 871762, 877168, 889579, 898176, 901442, 912447, 932554, 958976, 978578, 987983]]

    A = np.array([0, 103, 103, 102, 102, 101])
    k = np.searchsorted(np.cumsum(A), n_subjects)-1
    rest = n_subjects - np.cumsum(A)
    ids = ids[:(k+1)]
    ids[k] = ids[k][:rest[k]]

    for subset_dir, subject_ids in zip(['S500-1', 'S500-2', 'S500-3', 'S500-4',
                                        'S500-5'], ids):
        for subject_id in subject_ids:
            subject_dir = os.path.join(subset_dir, str(subject_id), 'MNINonLinear', 'Results')
            for record_id in ['rfMRI_REST1_RL', 'rfMRI_REST1_LR', 'rfMRI_REST2_RL', 'rfMRI_REST2_LR']:
                filename = os.path.join(subject_dir, record_id, '%s.nii.gz' % record_id)
                path = os.path.join(source_dir, filename)
                if os.path.exists(path):
                    filenames.append(path)
    if not filenames:
        raise ValueError('Data directory does not contain any valid records')
    fdescr = _get_dataset_descr('HCP_rest')
    res = dict(description=fdescr,
               func=filenames)
    mask_path = os.path.join(source_dir, 'mask_img.nii.gz')
    if os.path.exists(mask_path):
        res['mask'] = mask_path
    else:
        res['mask'] = None
    return Bunch(**res)